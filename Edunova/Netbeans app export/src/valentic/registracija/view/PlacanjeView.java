/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package valentic.registracija.view;

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.AbstractDocument;
import valentic.registracija.controller.IznimkaBrisanja;
import valentic.registracija.controller.KontrolaUnosa;
import valentic.registracija.controller.ObradaPlacanja;
import valentic.registracija.kontrolaplacanja.CCUtils;
import valentic.registracija.kontrolaplacanja.KontrolaPlacanja;
import valentic.registracija.model.Placanje;
import valentic.registracija.model.Stranka;
import valentic.registracija.model.Tehnicki;
import valentic.registracija.model.Vozilo;
import valentic.registracija.utility.Pomocno;

/**
 *
 * @author Basic
 */
public class PlacanjeView extends javax.swing.JFrame {

    private Placanje placanje;
    private ObradaPlacanja obp;
    private SimpleDateFormat sdf;
    private Vozilo vozilo;
    private Stranka stranka;
    private BigDecimal ukupniZbroj;
    private DocumentListener doc;
    private KontrolaUnosa ku;
    private int sifraStranke, sifraVozila, zip, status_code;
    private String mail, name, orderId, address, city, state, country, currency, cc, cvv;
    private String query,query1;
    private KontrolaPlacanja kontrolaPlacanja;
    private long transaction_id;
    private Tehnicki tehnicki;
    private int sifraplacanja;
    

    public PlacanjeView() {
        initComponents();
        sdf = new SimpleDateFormat("dd.MM.yyyy");
        obp = new ObradaPlacanja();
        kontrolaPlacanja = new KontrolaPlacanja();
        grupaGotovinaKartice.add(gotovina);
        grupaGotovinaKartice.add(kartice);
        //gotovina.setSelected(true);
        grupaIspravno.add(ispravnoDa);
        grupaIspravno.add(ispravnoNe);
        ispravnoNe.setSelected(true);
        ku = new KontrolaUnosa();
        this.placanje = placanje;
        this.tehnicki = tehnicki;
        setLocationRelativeTo(null);
        DefaultListModel model = new DefaultListModel();
        listaUplata.setModel(model);
        transactionid.hide();
        //provjeraZaPlacanjePrekoTehnickog(tehnicki);
        labelTransactionId.setVisible(false);
        

        ukupniZbroj();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupaGotovinaKartice = new javax.swing.ButtonGroup();
        grupaIspravno = new javax.swing.ButtonGroup();
        obrisiPodatke = new javax.swing.JButton();
        ispravnoDa = new javax.swing.JRadioButton();
        dodajPodatke = new javax.swing.JButton();
        zatvoriProzor = new javax.swing.JButton();
        izmjeniPodatke = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        ispravnoNe = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        biljezi = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        naknadaZaCeste = new javax.swing.JTextField();
        cijenaTehnickog = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        ukupno = new javax.swing.JTextField();
        cijenaRegistracije = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        naknadaZaOkolis = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        valuta = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        oibPlatitelja = new javax.swing.JTextField();
        imePlatitelja = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        datumPlacanja = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        idRacuna = new javax.swing.JTextField();
        transactionid = new javax.swing.JTextField();
        labelTransactionId = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        nazivVozila = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        novoPlacanje = new javax.swing.JButton();
        imeStranke = new javax.swing.JTextField();
        naplataHttp = new javax.swing.JButton();
        refund = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        brojRata = new javax.swing.JTextField();
        labelNazivKartice = new javax.swing.JLabel();
        labelVrstaPlacanja = new javax.swing.JLabel();
        kartice = new javax.swing.JRadioButton();
        verifikacijskiBroj = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        labelBrojRate = new javax.swing.JLabel();
        idKartice = new javax.swing.JTextField();
        gotovina = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaUplata = new javax.swing.JList();
        nazivKartice = new javax.swing.JTextField();
        labelVerifikacijskiBroj = new javax.swing.JLabel();
        labelIdKartice = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        obrisiPodatke.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        obrisiPodatke.setForeground(new java.awt.Color(255, 0, 0));
        obrisiPodatke.setIcon(new javax.swing.ImageIcon(getClass().getResource("/valentic/icons/obrisi2.png"))); // NOI18N
        obrisiPodatke.setText("Obriši podatke");
        obrisiPodatke.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        obrisiPodatke.setIconTextGap(12);
        obrisiPodatke.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                obrisiPodatkeActionPerformed(evt);
            }
        });

        ispravnoDa.setText("Ispravno");

        dodajPodatke.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        dodajPodatke.setForeground(new java.awt.Color(255, 0, 0));
        dodajPodatke.setIcon(new javax.swing.ImageIcon(getClass().getResource("/valentic/icons/dodaj2.png"))); // NOI18N
        dodajPodatke.setText("Novo plaćanje");
        dodajPodatke.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        dodajPodatke.setIconTextGap(12);
        dodajPodatke.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dodajPodatkeActionPerformed(evt);
            }
        });

        zatvoriProzor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/valentic/icons/zatvori.png"))); // NOI18N
        zatvoriProzor.setText("Zatvori prozor");
        zatvoriProzor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zatvoriProzorActionPerformed(evt);
            }
        });

        izmjeniPodatke.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        izmjeniPodatke.setForeground(new java.awt.Color(255, 51, 0));
        izmjeniPodatke.setIcon(new javax.swing.ImageIcon(getClass().getResource("/valentic/icons/izmjeni.png"))); // NOI18N
        izmjeniPodatke.setText("Izmjeni podatke");
        izmjeniPodatke.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        izmjeniPodatke.setIconTextGap(12);
        izmjeniPodatke.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                izmjeniPodatkeActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/valentic/icons/placanje.png"))); // NOI18N
        jLabel11.setText("Plaćanje");

        ispravnoNe.setText("Neispravno");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Platna lista", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 0, 51)));

        jLabel8.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel8.setText("Ukupno");

        jLabel2.setText("Cijena registracije");

        biljezi.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                biljeziKeyTyped(evt);
            }
        });

        jLabel4.setText("Naknada za okoliš");

        naknadaZaCeste.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                naknadaZaCesteKeyTyped(evt);
            }
        });

        cijenaTehnickog.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cijenaTehnickogKeyTyped(evt);
            }
        });

        jLabel6.setText("Biljezi");

        jLabel7.setText("Naknada za ceste");

        cijenaRegistracije.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cijenaRegistracijeKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cijenaRegistracijeKeyTyped(evt);
            }
        });

        jLabel3.setText("Cijena tehničkog pregleda");

        naknadaZaOkolis.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                naknadaZaOkolisKeyTyped(evt);
            }
        });

        jLabel20.setText("Valuta");

        valuta.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "HRK", "EUR" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6))
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cijenaRegistracije)
                    .addComponent(cijenaTehnickog)
                    .addComponent(naknadaZaOkolis)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(biljezi)
                    .addComponent(naknadaZaCeste, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ukupno)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(valuta, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cijenaRegistracije, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cijenaTehnickog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(naknadaZaCeste, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(naknadaZaOkolis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(biljezi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ukupno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(valuta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Podaci", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 0, 51)));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/valentic/icons/kalendar.png"))); // NOI18N
        jLabel10.setText("Datum plaćanja");

        jLabel12.setText("ID računa");

        jLabel14.setText("oib platitelja");

        jLabel15.setText("Ime platitelja");

        labelTransactionId.setText("Transaction id");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(idRacuna)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(oibPlatitelja)
                    .addComponent(imePlatitelja)
                    .addComponent(datumPlacanja)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(transactionid)
                    .addComponent(labelTransactionId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(datumPlacanja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imePlatitelja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(oibPlatitelja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(idRacuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(labelTransactionId)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(transactionid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setText("Naziv vozila");

        jLabel9.setText("Ime stranke");

        novoPlacanje.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        novoPlacanje.setText("Pripremi novi unos");
        novoPlacanje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                novoPlacanjeActionPerformed(evt);
            }
        });

        naplataHttp.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        naplataHttp.setForeground(new java.awt.Color(255, 0, 0));
        naplataHttp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/valentic/icons/kartice2.png"))); // NOI18N
        naplataHttp.setText("Kartična naplata");
        naplataHttp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        naplataHttp.setIconTextGap(12);
        naplataHttp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                naplataHttpActionPerformed(evt);
            }
        });

        refund.setText("Povrat sredstava");
        refund.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refundActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Plaćanje"));

        brojRata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brojRataActionPerformed(evt);
            }
        });

        labelNazivKartice.setIcon(new javax.swing.ImageIcon(getClass().getResource("/valentic/icons/kartice.png"))); // NOI18N
        labelNazivKartice.setText("Naziv kartice");

        labelVrstaPlacanja.setText("Vrsta plaćanja");

        kartice.setText("Kartice");
        kartice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                karticeActionPerformed(evt);
            }
        });

        jLabel21.setText("Lista svih uplata za odabrano vozilo");

        labelBrojRate.setText("Broj rata");

        idKartice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idKarticeActionPerformed(evt);
            }
        });

        gotovina.setText("Gotovina");
        gotovina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gotovinaActionPerformed(evt);
            }
        });

        listaUplata.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listaUplata.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaUplataMouseClicked(evt);
            }
        });
        listaUplata.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaUplataValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listaUplata);

        labelVerifikacijskiBroj.setText("Verifikacijski broj kartice(xxxx)");

        labelIdKartice.setIcon(new javax.swing.ImageIcon(getClass().getResource("/valentic/icons/kartice.png"))); // NOI18N
        labelIdKartice.setText("ID kartice");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(idKartice)
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(13, 13, 13))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelBrojRate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(brojRata, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                            .addComponent(labelVerifikacijskiBroj, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(verifikacijskiBroj))
                        .addGap(11, 11, 11))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelIdKartice, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nazivKartice))
                        .addGap(10, 10, 10))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(labelNazivKartice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(kartice, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(gotovina, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelVrstaPlacanja, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(10, 10, 10))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelVrstaPlacanja)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(gotovina)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(kartice)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelNazivKartice, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nazivKartice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelIdKartice, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(idKartice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelBrojRate, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(brojRata, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelVerifikacijskiBroj)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(verifikacijskiBroj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jLabel21)
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {brojRata, idKartice, nazivKartice, verifikacijskiBroj});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(1, 1, 1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)))
                .addGap(12, 12, 12)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dodajPodatke, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(obrisiPodatke, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(izmjeniPodatke)
                    .addComponent(zatvoriProzor, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ispravnoDa, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 3, Short.MAX_VALUE)
                        .addComponent(ispravnoNe))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nazivVozila, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(novoPlacanje, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(imeStranke, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(naplataHttp)
                    .addComponent(refund, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(373, 373, 373)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nazivVozila, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(imeStranke, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8)
                                .addComponent(dodajPodatke)
                                .addGap(18, 18, 18)
                                .addComponent(izmjeniPodatke)
                                .addGap(26, 26, 26)
                                .addComponent(obrisiPodatke)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ispravnoDa)
                                    .addComponent(ispravnoNe)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(87, 87, 87)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(novoPlacanje, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(naplataHttp, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(refund, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(zatvoriProzor, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown

        placanje = obp.getPlacanje(vozilo);
        popuniPoljaPlacanja(placanje);
        ucitajPodatkeListePlacanjaZaVozilo();
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentShown

    private void dodajPodatkeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dodajPodatkeActionPerformed

        placanje = new Placanje();

        if (gotovina.isSelected()) {

            CistiPoljaKartice();
            if (!provjeraUnosaZaGotovinu()) {
                return;
            }
        }

        if (kartice.isSelected()) {
            if (!provjeraUnosaZaKartice()) {
                return;
            }

        }

        postaviPoljaZaPlacanje(placanje);

        if (ispravnoNe.isSelected()) {
            JOptionPane.showMessageDialog(
                    rootPane,
                    "Ukoliko želite dodati podatke za Plaćanje označite ispravnost odabira!",
                    "Pogreška",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            if (obp.dodaj(placanje)) {

                JOptionPane.showMessageDialog(
                        rootPane,
                        "Uspješno dodani podaci o Plaćanju! ",
                        "Poruka",
                        JOptionPane.PLAIN_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(
                        rootPane,
                        "Pogreška kod dodavanja podataka!",
                        "Greška",
                        JOptionPane.ERROR_MESSAGE);
            }

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_dodajPodatkeActionPerformed

    private void izmjeniPodatkeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_izmjeniPodatkeActionPerformed

        if (listaUplata.getSelectedIndex() < 0) {
            JOptionPane.showMessageDialog(
                    rootPane,
                    "Prvo odaberite stavku",
                    "Pogreška",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        Placanje pe = (Placanje) listaUplata.getSelectedValue();

        if (gotovina.isSelected()) {
            CistiPoljaKartice();
            if (!provjeraUnosaZaGotovinu()) {
                return;
            }
        }

        if (kartice.isSelected()) {
            if (!provjeraUnosaZaKartice()) {
                return;
            }

        }

        postaviPoljaZaPlacanje(pe);

        if (ispravnoNe.isSelected()) {
            JOptionPane.showMessageDialog(
                    rootPane,
                    "Ukoliko želite izmjeniti podatke za plaćanje označite ispravnost odabira!",
                    "Pogreška",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            if (obp.izmjeni(pe)) {

                JOptionPane.showMessageDialog(
                        rootPane,
                        "Uspješna izmjena podataka! ",
                        "Poruka",
                        JOptionPane.PLAIN_MESSAGE);

                ucitajPodatkeListePlacanjaZaVozilo();
            } else {
                JOptionPane.showMessageDialog(
                        rootPane,
                        "Pogreška kod izmjene podataka!",
                        "Greška",
                        JOptionPane.ERROR_MESSAGE);
            }

        }
// TODO add your handling code here:
    }//GEN-LAST:event_izmjeniPodatkeActionPerformed

    private void obrisiPodatkeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_obrisiPodatkeActionPerformed

        if (listaUplata.getSelectedIndex() < 0) {
            JOptionPane.showMessageDialog(
                    rootPane,
                    "Prvo odaberite stavku",
                    "Pogreška",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        Placanje pe = (Placanje) listaUplata.getSelectedValue();

        Object[] options = {"Da", "Ne, vrati se nazad",};

        int izbor = JOptionPane.showOptionDialog(rootPane, "Da li stvarno želite obrisati podatke o plaćanju ??", "Sistem", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);

        if (ispravnoNe.isSelected()) {
            JOptionPane.showMessageDialog(
                    rootPane,
                    "Ukoliko želite obrisati podatke označite ispravnost odabira!",
                    "Obavijest",
                    JOptionPane.ERROR_MESSAGE);
        } else if (izbor == 0) {
            try {
                if (obp.obrisi(pe)) {

                    JOptionPane.showMessageDialog(
                            rootPane,
                            "Uspješno obrisani podaci o plaćanju! ",
                            "Obavijest",
                            JOptionPane.PLAIN_MESSAGE);
                    ucitajPodatkeListePlacanjaZaVozilo();
                } else {
                    JOptionPane.showMessageDialog(
                            rootPane,
                            "Pogreška kod brisanja podataka!",
                            "Greška",
                            JOptionPane.ERROR_MESSAGE);
                }
            } catch (IznimkaBrisanja ex) {
                switch (ex.getIznimka()) {
                    case ObradaPlacanja.UZ_PLACANJE_JE_VEZANA_REGISTRACIJA:
                        JOptionPane.showMessageDialog(
                                rootPane,
                                "Za plaćanja su vezani podaci o registraciji stoga plaćanja za odabrano vozilo nije moguće obrisati!",
                                "Greška",
                                JOptionPane.ERROR_MESSAGE);

                }
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_obrisiPodatkeActionPerformed

    private void novoPlacanjeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_novoPlacanjeActionPerformed

        ocistiPoljaZaNoviUnos();
        tempPodaciStrankeIVozila();
        
        

        //ukupniZbroj();
        // TODO add your handling code here:
    }//GEN-LAST:event_novoPlacanjeActionPerformed

    private void cijenaRegistracijeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cijenaRegistracijeKeyTyped

        if (!ku.brojeviKeyTyped(evt,cijenaRegistracije)) {
            return;
        }
        
       
        
        // TODO add your handling code here:
    }//GEN-LAST:event_cijenaRegistracijeKeyTyped

    private void cijenaTehnickogKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cijenaTehnickogKeyTyped

        if (!ku.brojeviKeyTyped(evt,cijenaTehnickog)) {
            return;
        }// TODO add your handling code here:
    }//GEN-LAST:event_cijenaTehnickogKeyTyped

    private void naknadaZaCesteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_naknadaZaCesteKeyTyped

        if (!ku.brojeviKeyTyped(evt,naknadaZaCeste)) {
            return;
        }// TODO add your handling code here:
    }//GEN-LAST:event_naknadaZaCesteKeyTyped

    private void naknadaZaOkolisKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_naknadaZaOkolisKeyTyped

        if (!ku.brojeviKeyTyped(evt,naknadaZaOkolis)) {
            return;
        }// TODO add your handling code here:
    }//GEN-LAST:event_naknadaZaOkolisKeyTyped

    private void biljeziKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_biljeziKeyTyped

        if (!ku.brojeviKeyTyped(evt,biljezi)) {
            return;
        }
// TODO add your handling code here:
    }//GEN-LAST:event_biljeziKeyTyped

    private void zatvoriProzorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zatvoriProzorActionPerformed
        dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_zatvoriProzorActionPerformed

    private void naplataHttpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_naplataHttpActionPerformed

        if (!provjeraUnosaZaKarticeNaplataSredstava()) {
            return;
        }

        postaviOstatakVrijednostiZaplacanje();
        try {
            if (!CCUtils.validCC(idKartice.getText())) {
                JOptionPane.showMessageDialog(
                        rootPane,
                        "Neispravan broj kartice! ",
                        "Poruka",
                        JOptionPane.PLAIN_MESSAGE);
                return;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        if (!provjeraOstalihPoljaStrankeZaKarticnuNaplatu()) {
            return;
        }

        if (!kontrolaPlacanja.naplata(name, orderId, mail, address, zip, city, state, country, ukupniZbroj, currency, cc, cvv)) {
            return;
        } else {

            transaction_id = kontrolaPlacanja.getTrans();

            transactionid.setText(Long.toString(transaction_id));
            transactionid.show();
            labelTransactionId.setVisible(true);

        }
// TODO add your handling code here:

    }//GEN-LAST:event_naplataHttpActionPerformed

    private void refundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refundActionPerformed

        if(transaction_id==0){
             JOptionPane.showMessageDialog(
                    rootPane,
                    "Transakcija uplate nije bila izvršena da bi mogli ostvariti povrat sredstava! ",
                    "Poruka",
                    JOptionPane.PLAIN_MESSAGE);
            return;
            
        }else if(!kontrolaPlacanja.povratNovca(transaction_id)){
            JOptionPane.showMessageDialog(
                    rootPane,
                    "Greška kod povrata sredstava, probajte ponovno! ",
                    "Poruka",
                    JOptionPane.PLAIN_MESSAGE);
            return;
  
        } else {
            transactionid.hide();
            labelTransactionId.setVisible(false);
        }
        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_refundActionPerformed

    private void listaUplataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaUplataMouseClicked

        if (listaUplata.getSelectedIndex() < 0) {

            JOptionPane.showMessageDialog(
                    rootPane,
                    "Odaberite plaćanje koje vas zanima!",
                    "Pogreška",
                    JOptionPane.PLAIN_MESSAGE);
            return;

        }

        //dohvaćanje vozila sa liste
        placanje = (Placanje) listaUplata.getSelectedValue();
        // metoda za popunjavanje liste
        popuniPoljaPlacanja(placanje);
        // TODO add your handling code here:
    }//GEN-LAST:event_listaUplataMouseClicked

    private void gotovinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gotovinaActionPerformed

        gotovinaChek();

        // TODO add your handling code here:
    }//GEN-LAST:event_gotovinaActionPerformed

    private void karticeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_karticeActionPerformed

        gotovinaChek();
        // TODO add your handling code here:
    }//GEN-LAST:event_karticeActionPerformed

    private void idKarticeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idKarticeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idKarticeActionPerformed

    private void brojRataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brojRataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_brojRataActionPerformed

    private void listaUplataValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaUplataValueChanged

        if (evt.getValueIsAdjusting()) {
            return;
        }

        placanje = (Placanje) listaUplata.getSelectedValue();
        popuniPoljaPlacanja(placanje);
        // TODO add your handling code here:
    }//GEN-LAST:event_listaUplataValueChanged

    private void cijenaRegistracijeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cijenaRegistracijeKeyPressed

        if(!ku.brojeviKeyTyped(evt, cijenaRegistracije)){
            return;
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_cijenaRegistracijeKeyPressed

    private void postaviOstatakVrijednostiZaplacanje() {

        name = imeStranke.getText();
        orderId = idRacuna.getText();
        cc = idKartice.getText();
        cvv = verifikacijskiBroj.getText();
        currency = valuta.getSelectedItem().toString();
        mail = stranka.getEmail();
        address = stranka.getAdresa();
        zip = stranka.getZip();
        city = stranka.getGrad();
        state = stranka.getRegija();
        country = stranka.getDrzava();

    }

    void setVozilo(Vozilo vozilo) {
        this.vozilo = vozilo;
    }

    void setStranka(Stranka stranka) {
        this.stranka = stranka;
    }

    void setTehnicki(Tehnicki tehnicki) {
        this.tehnicki = tehnicki;
    }

 

    private void popuniPoljaPlacanja(Placanje pl) {

        

        sifraStranke = stranka.getSifra();
        sifraVozila = vozilo.getSifra();
        try {
            nazivVozila.setText(String.format(vozilo.getNazivVozila()));
        } catch (Exception e) {
            nazivVozila.setText(null);
        }

        try {
            imeStranke.setText(String.format(stranka.getIme() + " " + stranka.getPrezime()));
        } catch (Exception e) {
            imeStranke.setText(null);
        }
        

        try {
            cijenaRegistracije.setText(String.valueOf(pl.getCijenaRegistracije()));
        } catch (Exception e) {
            cijenaRegistracije.setText(null);
        }

        try {
            cijenaTehnickog.setText(String.valueOf(pl.getCijenaTehnickog()));

        } catch (Exception e) {
            cijenaTehnickog.setText(null);
            cijenaTehnickog.setText(String.valueOf(tehnicki.getCijenaTehnickog()));
        }

        try {
            naknadaZaCeste.setText(String.valueOf(pl.getNaknadaZaCeste()));
        } catch (Exception e) {
            naknadaZaCeste.setAction(null);
        }

        try {
            naknadaZaOkolis.setText(String.valueOf(pl.getNaknadaZaOkolis()));

        } catch (Exception e) {
            naknadaZaOkolis.setText(null);
        }

        try {
            biljezi.setText(String.valueOf(pl.getBiljezi()));
        } catch (Exception e) {
            biljezi.setText(null);
        }

        try {
            ukupno.setText(String.valueOf(pl.getUkupno()));
        } catch (Exception e) {
            ukupno.setText(null);
        }

        try {
            idKartice.setText(pl.getIdkartice());
        } catch (Exception e) {
            idKartice.setText(null);
        }
        try {
            nazivKartice.setText(pl.getNazivKartice());
        } catch (Exception e) {
            nazivKartice.setText(null);
        }

        try {
            brojRata.setText(Integer.toString(pl.getBrojRata()));
        } catch (Exception e) {
            brojRata.setText("");
        }

        try {
            datumPlacanja.setText(sdf.format(pl.getDatumPlacanja()));
        } catch (Exception e) {
            Pomocno.KontrolaDatuma(datumPlacanja);
        }

        try {
            imePlatitelja.setText(pl.getImePlatitelja());
        } catch (Exception e) {
            imePlatitelja.setText(stranka.getIme() + " " + stranka.getPrezime());
        }

        try {
            oibPlatitelja.setText(pl.getOibPlatitelja());

        } catch (Exception e) {
            oibPlatitelja.setText(stranka.getOib());
        }

        try {
            idRacuna.setText(pl.getIdRacuna());
        } catch (Exception e) {
            idRacuna.setText(null);
        }
        try {
            sifraplacanja = placanje.getSifra();
        } catch (Exception e) {
            sifraplacanja = 0;
        }

        try {
            if (pl.isGotovinaKartice() == true) {
                gotovina.setSelected(true);
            } else if (pl.isGotovinaKartice() == false) {
                kartice.setSelected(true);
            }
        } catch (Exception e) {
            gotovina.setSelected(true);
        }

        gotovinaChek();
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField biljezi;
    private javax.swing.JTextField brojRata;
    private javax.swing.JTextField cijenaRegistracije;
    private javax.swing.JTextField cijenaTehnickog;
    private javax.swing.JTextField datumPlacanja;
    private javax.swing.JButton dodajPodatke;
    private javax.swing.JRadioButton gotovina;
    private javax.swing.ButtonGroup grupaGotovinaKartice;
    private javax.swing.ButtonGroup grupaIspravno;
    private javax.swing.JTextField idKartice;
    private javax.swing.JTextField idRacuna;
    private javax.swing.JTextField imePlatitelja;
    private javax.swing.JTextField imeStranke;
    private javax.swing.JRadioButton ispravnoDa;
    private javax.swing.JRadioButton ispravnoNe;
    private javax.swing.JButton izmjeniPodatke;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton kartice;
    private javax.swing.JLabel labelBrojRate;
    private javax.swing.JLabel labelIdKartice;
    private javax.swing.JLabel labelNazivKartice;
    private javax.swing.JLabel labelTransactionId;
    private javax.swing.JLabel labelVerifikacijskiBroj;
    private javax.swing.JLabel labelVrstaPlacanja;
    private javax.swing.JList listaUplata;
    private javax.swing.JTextField naknadaZaCeste;
    private javax.swing.JTextField naknadaZaOkolis;
    private javax.swing.JButton naplataHttp;
    private javax.swing.JTextField nazivKartice;
    private javax.swing.JTextField nazivVozila;
    private javax.swing.JButton novoPlacanje;
    private javax.swing.JButton obrisiPodatke;
    private javax.swing.JTextField oibPlatitelja;
    private javax.swing.JButton refund;
    private javax.swing.JTextField transactionid;
    private javax.swing.JTextField ukupno;
    private javax.swing.JComboBox valuta;
    private javax.swing.JTextField verifikacijskiBroj;
    private javax.swing.JButton zatvoriProzor;
    // End of variables declaration//GEN-END:variables

    void ukupniZbroj() {

        DocumentListener doc = new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                calcAndSetTotal();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                calcAndSetTotal();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                calcAndSetTotal();
            }

            void calcAndSetTotal() {
                ukupniZbroj = BigDecimal.ZERO;

                if (!cijenaRegistracije.getText().isEmpty()) {
                    ukupniZbroj = ukupniZbroj.add(new BigDecimal(cijenaRegistracije.getText()));
        
                }

                if (!cijenaTehnickog.getText().isEmpty()) {
                    ukupniZbroj = ukupniZbroj.add(new BigDecimal(cijenaTehnickog.getText()));
                }

                if (!naknadaZaCeste.getText().isEmpty()) {
                    ukupniZbroj = ukupniZbroj.add(new BigDecimal(naknadaZaCeste.getText()));
                }

                if (!naknadaZaOkolis.getText().isEmpty()) {
                    ukupniZbroj = ukupniZbroj.add(new BigDecimal(naknadaZaOkolis.getText()));
                }

                if (!biljezi.getText().isEmpty()) {
                    ukupniZbroj = ukupniZbroj.add(new BigDecimal(biljezi.getText()));
                }

                ukupno.setText(String.valueOf(ukupniZbroj));
                ukupno.setEditable(false);
            }
         
       
                
        };
        
        
        ((AbstractDocument) (cijenaRegistracije.getDocument())).addDocumentListener(doc);
        ((AbstractDocument) (cijenaTehnickog.getDocument())).addDocumentListener(doc);
        ((AbstractDocument) (naknadaZaCeste.getDocument())).addDocumentListener(doc);
        ((AbstractDocument) (naknadaZaOkolis.getDocument())).addDocumentListener(doc);
        ((AbstractDocument) (biljezi.getDocument())).addDocumentListener(doc);

        //ukupniZbroj = new BigDecimal(ukupno.getText());
    }

    private void postaviPoljaZaPlacanje(Placanje placanje) {

        placanje.setVozilo(sifraVozila);

        placanje.setCijenaRegistracije(new BigDecimal(cijenaRegistracije.getText()));

        placanje.setCijenaTehnickog(new BigDecimal(cijenaTehnickog.getText()));

        placanje.setNaknadaZaCeste(new BigDecimal(naknadaZaCeste.getText()));

        placanje.setNaknadaZaOkolis(new BigDecimal(naknadaZaOkolis.getText()));

        placanje.setBiljezi(new BigDecimal(biljezi.getText()));

        placanje.setUkupno(new BigDecimal(ukupno.getText()));

        //moguci unos 
        

        try {
            placanje.setNazivKartice(nazivKartice.getText());
        } catch (Exception e) {
            placanje.setNazivKartice(null);
        }

        try {
            placanje.setBrojRata(Integer.parseInt(brojRata.getText()));
        } catch (Exception e) {
            placanje.setBrojRata(0);
        }

        try {
            placanje.setDatumPlacanja(sdf.parse(datumPlacanja.getText()));
        } catch (ParseException ex) {

        }

        placanje.setImePlatitelja(imePlatitelja.getText());

        placanje.setOibPlatitelja(oibPlatitelja.getText());

        placanje.setIdRacuna(idRacuna.getText());

        if (gotovina.isSelected()) {
            placanje.setGotovinaKartice(true);

        } else if (kartice.isSelected()) {
            placanje.setGotovinaKartice(false);

        }

    }

    private void gotovinaChek() {
        if (gotovina.isSelected()) {
            idKartice.hide();
            nazivKartice.hide();
            brojRata.hide();
            verifikacijskiBroj.hide();
            naplataHttp.hide();
            refund.hide();

            labelBrojRate.setVisible(false);
            labelIdKartice.setVisible(false);
            labelNazivKartice.setVisible(false);
            labelVerifikacijskiBroj.setVisible(false);

        } else if (kartice.isSelected()) {
            idKartice.show();
            nazivKartice.show();
            brojRata.show();
            verifikacijskiBroj.show();
            naplataHttp.show();
            refund.show();

            labelBrojRate.setVisible(true);
            labelIdKartice.setVisible(true);
            labelNazivKartice.setVisible(true);
            labelVerifikacijskiBroj.setVisible(true);
        }
    }

    private void ocistiPoljaZaNoviUnos() {
        cijenaRegistracije.setText("");
        cijenaTehnickog.setText("");
        naknadaZaCeste.setText("");
        naknadaZaOkolis.setText("");
        biljezi.setText("");
        nazivKartice.setText("");
        idKartice.setText("");
        brojRata.setText("");
        verifikacijskiBroj.setText("");
        Pomocno.KontrolaDatuma(datumPlacanja);
        imePlatitelja.setText("");
        oibPlatitelja.setText("");
        idRacuna.setText("");

    }

    private void CistiPoljaKartice() {
        nazivKartice.setText("");
        idKartice.setText("");
        brojRata.setText("");
    }

    private void ucitajPodatkeListePlacanjaZaVozilo() {
        List<Placanje> placanja = obp.getPlacanja(vozilo);
        DefaultListModel<Placanje> pl = new DefaultListModel<>();
        for (Placanje placanje1 : placanja) {
            pl.addElement(placanje1);
        }
        this.listaUplata.setModel(pl);
    }

    private boolean provjeraUnosaZaKartice() {
        return ku.provjeraUnosaImenaPrezimena(imePlatitelja)
                && ku.provjeraUnosaZaDecimalniZapis(ukupno)
                && ku.provjeraUnosaZaDatum(datumPlacanja)
                && ku.provjeraUnosaOiba(oibPlatitelja)
                && ku.provjeraUnosaID(idRacuna)
                && ku.provjeraUnosaNaziva(nazivKartice)
                && ku.provjeraUnosaID(idKartice)
                && ku.provjeraUnosaRata(brojRata)
                && !ku.provjeraIstogOibaDodavanje(oibPlatitelja, query1)
                && !ku.provjeraIstogOibaIzmjena(oibPlatitelja, query, placanje.getSifra())
                && ku.provjeraUnosaVerifikacijskoBrojaKartice(verifikacijskiBroj)
                && provjeraPoljaZaKartice();

    }
    
    private boolean provjeraUnosaZaKarticeNaplataSredstava() {
        return ku.provjeraUnosaImenaPrezimena(imePlatitelja)
                && ku.provjeraUnosaZaDecimalniZapis(ukupno)
                && ku.provjeraUnosaZaDatum(datumPlacanja)
                && ku.provjeraUnosaOiba(oibPlatitelja)
                && ku.provjeraUnosaID(idRacuna)
                && ku.provjeraUnosaNaziva(nazivKartice)
                && ku.provjeraUnosaID(idKartice)
                && ku.provjeraUnosaRata(brojRata)
                
                && ku.provjeraUnosaVerifikacijskoBrojaKartice(verifikacijskiBroj)
                && provjeraPoljaZaKartice();

    }

    private boolean provjeraUnosaZaGotovinu() {
        return ku.provjeraUnosaImenaPrezimena(imePlatitelja)
                && ku.provjeraUnosaZaDecimalniZapis(ukupno)
                && ku.provjeraUnosaZaDatum(datumPlacanja)
                && ku.provjeraUnosaOiba(oibPlatitelja)
                
                && ku.provjeraUnosaID(idRacuna);

    }

    private boolean provjeraOstalihPoljaStrankeZaKarticnuNaplatu() {
        if (name == null || mail == null || address == null || zip == 0 || city == null || state == null || country == null) {

            JOptionPane.showMessageDialog(
                    rootPane,
                    "Nisu unešeni ostali podaci stranke koji su potrebni za kartičnu naplatu.Obavite potreban unos!",
                    "Pogreška",
                    JOptionPane.PLAIN_MESSAGE);
            return false;
        }
        return true;
    }

    private boolean provjeraPoljaZaKartice() {
        if (nazivKartice.getText() == null || idKartice.getText() == null || brojRata.getText() == null || verifikacijskiBroj.getText() == null) {
            JOptionPane.showMessageDialog(
                    rootPane,
                    "Niste unjeli sva polja za kartičnu naplatu!",
                    "Pogreška",
                    JOptionPane.PLAIN_MESSAGE);
            return false;
        }
        return true;
    }

    void provjeraZaPlacanjePrekoTehnickog(Tehnicki tehnicki) {
        if (!tehnicki.isIspravnoVozilo() == true) {
            dodajPodatke.hide();
            naplataHttp.hide();
            gotovina.hide();
            kartice.hide();
            labelVrstaPlacanja.setVisible(false);
            JOptionPane.showMessageDialog(
                    rootPane,
                    "Zbog neispravnosti ovog vozila na zadnjem tehničkom pregledu nije moguće napravit novu naplatu troškova registracije!",
                    "Pogreška",
                    JOptionPane.PLAIN_MESSAGE);

        }

    }

    private void tempPodaciStrankeIVozila() {
        try {
            imePlatitelja.setText(stranka.getIme() + " " + stranka.getPrezime());
        } catch (Exception e) {
            imePlatitelja.setText("");
        }
        
        try {
            oibPlatitelja.setText((stranka.getOib()));
        } catch (Exception e) {
            oibPlatitelja.setText("");
        }
        
        try {
            cijenaTehnickog.setText(String.valueOf(tehnicki.getCijenaTehnickog()));
        } catch (Exception e) {
            cijenaTehnickog.setText("");
        }
    }
    
   
   
}
